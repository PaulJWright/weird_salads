"""add tables

Revision ID: 357a74ba46e5
Revises: d5be4204230b
Create Date: 2024-08-05 11:05:54.345842

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "357a74ba46e5"
down_revision: Union[str, None] = "d5be4204230b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ingredients",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "menu",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.Column("on_menu", sa.Boolean(), nullable=True),
        sa.CheckConstraint("price >= 0.0", name="check_price_non_negative"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "recipe_ingredients",
        sa.Column("recipe_id", sa.Integer(), nullable=False),
        sa.Column("ingredient_id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "unit",
            sa.Enum(
                "liter", "deciliter", "centiliter", "milliliter", name="unitofmeasure"
            ),
            nullable=False,
        ),
        sa.CheckConstraint("quantity >= 0.0", name="check_quantity_non_negative"),
        sa.ForeignKeyConstraint(
            ["ingredient_id"],
            ["ingredients.id"],
        ),
        sa.ForeignKeyConstraint(
            ["recipe_id"],
            ["menu.id"],
        ),
        sa.PrimaryKeyConstraint("recipe_id", "ingredient_id"),
    )
    op.create_index(
        "idx_recipe_ingredient",
        "recipe_ingredients",
        ["recipe_id", "ingredient_id"],
        unique=False,
    )
    op.create_table(
        "stock",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("ingredient_id", sa.Integer(), nullable=True),
        sa.Column(
            "unit",
            sa.Enum(
                "liter", "deciliter", "centiliter", "milliliter", name="unitofmeasure"
            ),
            nullable=False,
        ),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("cost", sa.Float(), nullable=False),
        sa.Column("delivery_date", sa.DateTime(), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.CheckConstraint("cost >= 0.0", name="check_cost_non_negative"),
        sa.CheckConstraint("quantity >= 0.0", name="check_quantity_non_negative"),
        sa.ForeignKeyConstraint(
            ["ingredient_id"],
            ["ingredients.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_stock_delivery_date", "stock", ["delivery_date"], unique=False)
    op.create_index("idx_stock_ingredient", "stock", ["ingredient_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_stock_ingredient", table_name="stock")
    op.drop_index("idx_stock_delivery_date", table_name="stock")
    op.drop_table("stock")
    op.drop_index("idx_recipe_ingredient", table_name="recipe_ingredients")
    op.drop_table("recipe_ingredients")
    op.drop_table("menu")
    op.drop_table("ingredients")
    # ### end Alembic commands ###
